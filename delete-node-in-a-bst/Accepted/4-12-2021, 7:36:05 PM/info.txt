{"id":479724306,"lang":"python3","time":"1 year, 3 months","timestamp":1618236365,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/479724306/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"18.4 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def deleteNode(self, root: TreeNode, key: int) -> TreeNode:\n        if not root:\n            return\n        if key<root.val:\n            root.left = self.deleteNode(root.left,key)\n        elif key>root.val:\n            root.right = self.deleteNode(root.right,key)\n        else:\n            if root.left and root.right:\n                delNode = self.findSmall(root.right)\n                root.val = delNode.val\n                root.right = self.deleteNode(root.right, delNode.val)\n            elif root.left:\n                root = root.left\n            elif root.right:\n                root = root.right\n            else:\n                root = None\n                \n        return root\n            \n    def findSmall(self,root):\n        if not root.left:\n            return root\n        return self.findSmall(root.left)","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst"}