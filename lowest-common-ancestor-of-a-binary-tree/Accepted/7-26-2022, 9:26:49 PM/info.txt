{"id":757342078,"lang":"python3","time":"1 week, 6 days","timestamp":1658851009,"status_display":"Accepted","runtime":"106 ms","url":"/submissions/detail/757342078/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"18.6 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution:\n    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':\n        stack = [root]\n        parent = {root: None}\n        while p not in parent or q not in parent:\n            node = stack.pop()\n            if node.left:\n                parent[node.left] = node\n                stack.append(node.left)\n            if node.right:\n                parent[node.right] = node\n                stack.append(node.right)\n        ancestors = set()\n        while p:\n            ancestors.add(p)\n            p = parent[p]\n        while q not in ancestors:\n            q = parent[q]\n        return q","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}