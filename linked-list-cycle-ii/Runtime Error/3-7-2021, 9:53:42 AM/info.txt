{"id":464547215,"lang":"python3","time":"1 year, 5 months","timestamp":1615091022,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/464547215/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"N/A","code":"# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, x):\n#         self.val = x\n#         self.next = None\n\nclass Solution:\n    def detectCycle(self, head: ListNode) -> ListNode:\n        if head== Null :\n            return head\n        slow =  head\n        fast = head.next\n        while(fast !=Null and fast.next!=Null and slow!=Null):\n            if(fast==slow):\n                return True\n            fast =fast.next.next\n            slow = slow.next\n        return False","compare_result":"0000000000000000","title_slug":"linked-list-cycle-ii"}