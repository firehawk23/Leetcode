{"id":750033062,"lang":"python3","time":"3Â weeks","timestamp":1658127181,"status_display":"Accepted","runtime":"794 ms","url":"/submissions/detail/750033062/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"13.9 MB","code":"class Solution:\n    def solveSudoku(self, board: List[List[str]]) -> None:\n        n = 9\n        def isValid(row, col, c):\n            for i in range(9):\n                if board[i][col] == c:\n                    return False\n                if board[row][i] == c:\n                    return False\n                if board[3*(row//3) + i//3][3*(col//3) + i%3] == c:\n                    return False\n            return True\n            \n        def solve(row, col):\n            if row == n:\n                return True\n            if col == n:\n                return solve(row+1, 0)\n            \n            if board[row][col] == \".\":\n                for c in range(1, 10):\n                    if isValid(row, col, str(c)):\n                        board[row][col] = str(c)\n                        \n                        if solve(row, col + 1):\n                            return True\n                        board[row][col] = \".\"\n                return False\n            else:\n                return solve(row, col + 1)\n            \n        solve(0, 0)\n\t\t\n","compare_result":"111111","title_slug":"sudoku-solver"}