{"id":543273278,"lang":"python3","time":"11 months, 2 weeks","timestamp":1629782566,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/543273278/","is_pending":"Not Pending","title":"Game of Life","memory":"14.5 MB","code":"class Solution:\n    def withinBoundry(self, m: int, n: int, row: int, col: int) -> bool:\n        return (0 <= row < m) and (0 <= col < n)\n\n    def findNeighbours(self,board:List[List[int]],m:int,n:int,row:int,col:int) -> int:\n        num_neigh = 0\n        directions = [(row-1, col-1), (row, col-1), (row+1, col-1),\n                      (row-1, col), (row+1, col),\n                      (row-1, col+1), (row, col+1), (row+1, col+1)]\n        for dir in directions:\n            if self.withinBoundry(m,n,dir[0],dir[1]):\n                num_neigh = num_neigh+board[dir[0]][dir[1]]\n        return num_neigh\n        \n    def gameOfLife(self, board: List[List[int]]) -> None:\n        m = len(board)\n        n = len(board[0])\n        neighbours = [[0 for j in range(n)] for i in range(m)]\n        for row in range(m):\n            for col in range(n):\n                neighbours[row][col] = self.findNeighbours(board,m,n,row,col)\n        for row in range(m):\n            for col in range(n):\n                if board[row][col]==1 and neighbours[row][col]<2:\n                    board[row][col]=0\n                elif board[row][col]==1 and neighbours[row][col]>3:\n                    board[row][col]=0\n                elif board[row][col]==1 and (2<=neighbours[row][col]<=3):\n                    board[row][col]=1\n                elif board[row][col]==0 and neighbours[row][col]==3:\n                    board[row][col]=1\n                else:\n                    pass\n        return","compare_result":"1111111111111111111111","title_slug":"game-of-life"}